#!/bin/sh
###########################################################################
##                                                                       ##
##                  Language Technologies Institute                      ##
##                     Carnegie Mellon University                        ##
##                        Copyright (c) 2004                             ##
##                        All Rights Reserved.                           ##
##                                                                       ##
##  Permission is hereby granted, free of charge, to use and distribute  ##
##  this software and its documentation without restriction, including   ##
##  without limitation the rights to use, copy, modify, merge, publish,  ##
##  distribute, sublicense, and/or sell copies of this work, and to      ##
##  permit persons to whom this work is furnished to do so, subject to   ##
##  the following conditions:                                            ##
##   1. The code must retain the above copyright notice, this list of    ##
##      conditions and the following disclaimer.                         ##
##   2. Any modifications must be clearly marked as such.                ##
##   3. Original authors' names are not deleted.                         ##
##   4. The authors' names are not used to endorse or promote products   ##
##      derived from this software without specific prior written        ##
##      permission.                                                      ##
##                                                                       ##
##  CARNEGIE MELLON UNIVERSITY AND THE CONTRIBUTORS TO THIS WORK         ##
##  DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING      ##
##  ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT   ##
##  SHALL CARNEGIE MELLON UNIVERSITY NOR THE CONTRIBUTORS BE LIABLE      ##
##  FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    ##
##  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN   ##
##  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,          ##
##  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF       ##
##  THIS SOFTWARE.                                                       ##
##                                                                       ##
###########################################################################
##                                                                       ##
##  Make the files from the Festival Released version                    ##
##                                                                       ##
###########################################################################
# Modified by Sergio Oller, 2017 for mimic #

THISSCRIPT=`readlink -f "$0"`
SRCDIR=`dirname $THISSCRIPT`

export PYTHONPATH="${SRCDIR}:${PYTHONPATH}"

# We may get rid of the dependencies other than python) in the future
# sudo apt install speech-tools festival
#export WAGON=`which wagon` # speech-tools binary
#export WFST_BUILD=`which wfst_build` # speech-tools binary
#export FESTIVAL=`which festival`
#PYTHON3=`which python3`

#LEX_LTS_PREFIX="cmu" # "fr" "cmu"

#LEX_INPUT="${SRCDIR}/fr_dict.out"
#LEX_INPUT_FMT="noflat"
#LEX_INPUT="${SRCDIR}/cmudict.scm"
#LEX_INPUT_FMT="flat"
#LEX_DEF_SCM="${LEX_LTS_PREFIX}_lex.scm"

LTS_SCRATCH="${BUILDDIR}/${LEX_LTS_PREFIX}_lts_scratch"

PRUNEDIR="${BUILDDIR}/pruned"
LEX_PRUNED="${PRUNEDIR}/${LEX_LTS_PREFIX}_pruned_lex.scm"
LEX_PRUNED_COMPILED="${PRUNEDIR}/${LEX_LTS_PREFIX}_pruned_lex_comp.scm"

RESULT_DIR="$BUILDDIR/"

if [ $# = 0 ]; then
   $0 lts  || exit 1
   $0 lex  || exit 1
   $0 compresslex || exit 1
   $0 install || exit 1
   echo "make_cmulex finished successfully"
   exit 0
fi

if [ "$1" = "lts" ]; then
  echo "Train LTS rules: " `date -R`
  ## Requires $WAGON and $WFST_BUILD
  mimic_lts_train.py --allowables "${ALLOWABLES}" --lexicon "${LEX_INPUT}" ${LEX_INPUT_FMT} --lang-prefix "${LEX_LTS_PREFIX}" || exit 1
fi

if [ "$1" = "lex" ]; then
  # Find the words to prune from the built lexicon
  # We will prune words that aren't homographs and the LTS gets correct
  # Use the lts_test.log to find the failed entries and only
  # include them in the list 
  echo "LEX: Prune lexicon started at" `date -R`
  mkdir -p "$PRUNEDIR" || exit 1
  mkdir -p "${LEX_LTS_PREFIX}_c" || exit 1
  ${PYTHON3} -m pymimic.train_lex_lts.prune_lexicon --lexicon "${LEX_INPUT}" ${LEX_INPUT_FMT} \
             --lts_rules "${LEX_LTS_PREFIX}_lts_rules.scm" --output "${LEX_PRUNED}" || exit 1
  echo "LEX: Compile pruned lexicon started at" `date -R`
  cp "${PHONESET_SCM}" "${BUILDDIR}/${LEX_LTS_PREFIX}_phoneset.scm"
  cp `which "make_lex.scm"` "${BUILDDIR}/make_lex.scm"
  export LC_ALL=C
  export LANG=C
  $FESTIVAL --heap 10000000 -b '(begin (load "'"${LEX_DEF_SCM}"'") (lex.compile "'"${LEX_PRUNED}"'" "'"${LEX_PRUNED_COMPILED}"'"))' || exit 1
  echo "lex/lextoC started at" `date -R`
  $FESTIVAL --heap 10000000 -b "${SRCDIR}/make_lex.scm" "${PHONESET_SCM}" '(lextoC "'"${LEX_LTS_PREFIX}"'" "'"${LEX_PRUNED_COMPILED}"'" "'"${LEX_LTS_PREFIX}_c"'")' || exit 1
fi

if [ "$1" = "compresslex" ]; then
echo "compresslex started at" `date -R`
# Compress the entries and phone strings by finding best ngrams 
( cd "${LEX_LTS_PREFIX}_c";
  cp `which "make_lex.scm"` "make_lex.scm"
   # uses $FESTIVAL and make_lex.scm
  export LC_ALL=C
  export LANG=C
  mimic_huff_table phones ${LEX_LTS_PREFIX}_lex_data ${LEX_LTS_PREFIX}_lex_phones_huff_table.c || exit 1
  mimic_huff_table entries ${LEX_LTS_PREFIX}_lex_data ${LEX_LTS_PREFIX}_lex_entries_huff_table.c || exit 1
  paste huff.entries.compressed huff.phones.compressed huff.tmp.corpus | 
  tr -d " " |
  awk 'BEGIN {pcount = 1;
              printf("/* index to compressed data */\n");
             }
       function unenoctal(x)
       {
          y = ((substr(x,1,1)+0)*64) + ((substr(x,2,1)+0)*8) + (substr(x,3,1)+0);
          return y;
       }
       {printf("   ");
        for (i=length($2)-3; i>0; i-=4)
        {
           printf("%d,",unenoctal(substr($2,i+1,3)));
           pcount++;
        }
        pcount++;
        printf(" 255, /* %d %s */ ",pcount,$3);
        for (i=1; i<length($1); i+=4)
        {
           printf("%d,",unenoctal(substr($1,i+1,3)));
           pcount++;
        }
        printf("0,\n");
        pcount++;
       }
     END { printf("/* num_bytes = %d */\n",pcount);}' > ${LEX_LTS_PREFIX}_lex_data_compressed.c
  grep "num_bytes = " ${LEX_LTS_PREFIX}_lex_data_compressed.c |
  awk '{print $4}' > ${LEX_LTS_PREFIX}_lex_num_bytes_compressed.c
) || exit 1
fi

if [ "$1" = "install" ]; then
echo "install started at" `date -R`
mkdir -p "${RESULT_DIR}" || exit 1
cp -p ${LEX_LTS_PREFIX}_c/${LEX_LTS_PREFIX}_lex_data.c "${RESULT_DIR}" || exit 1
cp -p ${LEX_LTS_PREFIX}_c/${LEX_LTS_PREFIX}_lex_data_compressed.c "${RESULT_DIR}"/${LEX_LTS_PREFIX}_lex_data_raw.c || exit 1
cp -p ${LEX_LTS_PREFIX}_c/${LEX_LTS_PREFIX}_lex_phones_huff_table.c "${RESULT_DIR}" || exit 1
cp -p ${LEX_LTS_PREFIX}_c/${LEX_LTS_PREFIX}_lex_entries_huff_table.c "${RESULT_DIR}" || exit 1
cp -p ${LEX_LTS_PREFIX}_c/${LEX_LTS_PREFIX}_lex_entries.c "${RESULT_DIR}" || exit 1
cp -p ${LEX_LTS_PREFIX}_c/${LEX_LTS_PREFIX}_lex_num_bytes_compressed.c "${RESULT_DIR}"/${LEX_LTS_PREFIX}_lex_num_bytes.c || exit 1

cp -p ${LEX_LTS_PREFIX}_c/${LEX_LTS_PREFIX}_lts_rules.c "${RESULT_DIR}" || exit 1
fi
